---
title: Subset and Plot
author: Eli Holmes
---

::: {.callout-note title="Learning Objectives"}

1. How to crop a single data file
2. How to create a data cube with `terra`
3. How to crop a data cube to a box
:::

## Load packages

```{r message=FALSE}
library(earthdatalogin)
library(lubridate)
library(terra)
```

## Get a vector of urls to our nc files

Authenticate.

```{r}
earthdatalogin::edl_netrc() 
```

Get the urls. The `results` object is a vector of urls pointing to our `netCDF` files in the cloud. Each `netCDF` file is circa 670Mb.

```{r results_MUR}
short_name <- 'MUR-JPL-L4-GLOB-v4.1'
bbox <- c(xmin=-75.5, ymin=33.5, xmax=-73.5, ymax=35.5) 
tbox <- c("2020-01-16", "2020-12-16")

results <- earthdatalogin::edl_search(
  short_name = short_name,
  version = "4.1",
  temporal = tbox, 
  bounding_box = paste(bbox,collapse=",")
)
length(results)
results[1:3]
```

## Crop and plot one netCDF file

Each MUR SST `netCDF` file is large so I do not want to download. Instead I will use `terra::rast()` to do subset the data on the server side. `vsi = TRUE` is letting function know that these are files in the cloud and to use GDAL functionality for that type of resource.

```{r get_one_MUR}
ras <- terra::rast(results[1], vsi=TRUE)
```

*Getting errors? Scroll below to the troubleshooting section.*

Crop to a very small region.

```{r crop_MUR}
# note order of terms is different than in bbox!!
e <- terra::ext(c(xmin=-75.5, xmax=-73.5,  ymin=33.5, ymax=35.5 ))
rc <- terra::crop(ras, e)
rc
```

Plot:
```{r plot_MUR}
plot(rc[[c(1, 2)]])
```


## Crop and plot multiple netCDF files

We can send multiple urls to `terra`. 

```{r get_four_MUR}
ras_all <- terra::rast(results[c(1:4)], vsi = TRUE)
ras_all
```

Crop to a small extent. Note order of terms is different than in bbox! Since we will only plot sst for this example, it is faster to first select our variable of interest.

```{r crop_four_MUR}
e <- terra::ext(c(xmin=-75.5, xmax=-73.5,  ymin=33.5, ymax=35.5 ))
ras_sst <- ras_all["analysed_sst",]
rc_sst <- terra::crop(ras_sst, e)
rc_sst
```

Convert Kelvin to Celsius.

```{r}
rc_sst <- rc_sst - 273.15
```

Now plot. We will set the range so it is the same across plots and clean up the titles to be just day without time.

```{r plot_four_MUR}
titles <- terra::time(x = rc_sst) |> lubridate::date() |> as.character()
plot(rc_sst, 
     range = c(16, 26),
     main = titles)
```

## Reading in a Zarr file

Reading in Zarr files is easy in Python with `xarray` but currently this is difficult in R. See the `gdalcubes.qmd` file in the `tutorials/r` directory. However we can open individual files from a Zarr file. 

Read one file.

```{r read_one_Zarr}
url <- "https://mur-sst.s3.us-west-2.amazonaws.com/zarr-v1"
prefixes <- 'ZARR:\"/vsicurl/'
slice <- '\":/analysed_sst:0"'
addr <- paste0(prefixes, url, slice)
y = terra::rast(addr)
```

Plot
```{r}
e <- terra::ext(c(xmin=-75.5, xmax=-73.5,  ymin=33.5, ymax=35.5 ))
y |> terra::crop(e) |> terra::plot()
```

Read multiple files.

```{r}
vrt <- function(i) {
  prefix <-  'ZARR:\"/vsicurl/'
  url <- "https://mur-sst.s3.us-west-2.amazonaws.com/zarr-v1"
  slice <- paste0('\":/analysed_sst:',i,'"')
  paste0(prefix, url, slice)
}
```

```{r}
y <- terra::rast(vrt(0:3))
e <- terra::ext(c(xmin=-75.5, xmax=-73.5,  ymin=33.5, ymax=35.5 ))
y |> terra::crop(e) |> terra::plot()
```

## Conclusions

Some really cool things just happened here! You connected to multiple remote-sensing files (`netCDF`) in the cloud and worked with them without directly downloading them.

