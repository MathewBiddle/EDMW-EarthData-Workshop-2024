---
title: Extract data within a boundary
author: NOAA CoastWatch, NOAA Openscapes
---

::: {.callout-note title="Learning Objectives"}

1. How to access and download sea surface temperature from NASA Earthdata
2. How to apply shapefiles as masks to satellite data
3. How to compute monthly average sea surface temperature
:::


## Summary

In this example, we will utilize the earthdatalogin R package 
to retrieve sea surface temperature data from NASA Earthdata. 

The `earthdatalogin` package simplifies the process of discovering and 
accessing NASA Earth science data.


This example is adapted from the NOAA CoastWatch 
Satellite Data Tutorials. To explore the full range of 
tutorials on accessing and utilizing oceanographic satellite data, 
visit the [NOAA CoastWatch Tutorial Github repository.](https://github.com/coastwatch-training/CoastWatch-Tutorials)


For more on `earthdatalogin` visit the 
[`earthdatalogin` GitHub](https://github.com/boettiger-lab/earthdatalogin/) 
page and/or the [`earthdatalogin` documentation](https://boettiger-lab.github.io/earthdatalogin/) site. 
Be aware that `earthdatalogin` is under active development. 

## Prerequisites

An Earthdata Login account is required to access data from NASA Earthdata. 
Please visit <https://urs.earthdata.nasa.gov> to register and manage 
your Earthdata Login account. This account is free to create and 
only takes a moment to set up.  


### Import Required Packages  

*Note: See the set-up tab (in left nav bar) for instructions on getting set up on your own computer.*


## Datasets used
__GHRSST Level 4 AVHRR_OI Global Blended Sea Surface Temperature Analysis (GDS2) from NCEI__    
This NOAA blended SST is a moderate resolution satellite-based gap-free 
sea surface temperature (SST) product. We will use the daily data.
https://cmr.earthdata.nasa.gov/search/concepts/C2036881712-POCLOUD.html

__Longhurst Marine Provinces__  
The dataset represents the division of the world oceans 
into provinces as defined by Longhurst (1995; 1998; 2006). 
This division has been based on the prevailing role of physical 
forcing as a regulator of phytoplankton distribution. 

The Longhurst Marine Provinces dataset is available online 
(https://www.marineregions.org/downloads.php) and 
within the shapes folder associated with this repository. 
For this exercise we will use the Gulf Stream province (ProvCode: GFST)  

![../images/longhurst.png](../images/longhurst.png)

## Load packages

```{r}
library(terra)
library(earthdatalogin)
library(sf)
library(ggplot2)
```

## Load boundary coordinates 

The shapefile for the Longhurst marine provinces includes a list of regions.  
For this exercise, we will only use the boundary of one province, 
the Gulf Stream region ("GFST"). 

```{r read province boundaries from shapefiles}

# Set directory path for shapefile
dir_path <- '../resources/longhurst_v4_2010/'

# Import shape files (Longhurst coordinates)
shapes <- read_sf(dsn = dir_path, layer = "Longhurst_world_v4_2010")

# Example List of all the province names
shapes$ProvCode

# Get boundary coordinates for Gulf Stream region (GFST)
GFST <- shapes[shapes$ProvCode == "GFST",]

xcoord <- st_coordinates(GFST)[,1]
ycoord <- st_coordinates(GFST)[,2]

```

## Search data from NASA Earthdata with the dataset unique name and coordinates/dates 

Connect to NASA Earthdata with no credentials

```{r}
earthdatalogin::edl_netrc()
```

```{r}
# Dataset unique name
short_name <- 'AVHRR_OI-NCEI-L4-GLOB-v2.1'

# Set boundaries based on the shapefile
bbox <- c(xmin=min(xcoord), ymin=min(ycoord), xmax=max(xcoord), ymax=max(ycoord)) 

# Set time range
tbox <- c("2020-01-01", "2020-04-01")

# Search data that match the boundaries and time range
results <- edl_search(
  short_name = short_name,
  version = "2.1",
  temporal = tbox,
  bounding_box = paste(bbox, collapse = ",")
)

# Check number of files 
length(results)
```

There are `r length(results)` files.


## Apply shapefiles as mask to satellite data


```{r}

# Select the first result
ras <- terra::rast(results[1], vsi = TRUE)

# Extract SST from the multi-layer raster data
ras_sst <- ras[["analysed_sst"]]

# Vectorize shapes
shp <- vect(shapes)

# Get boundaries for GFST
GFST <- shp[shp$ProvCode == "GFST",]

# Plot the SST data
plot(ras_sst)

# Plot GFST boundaries from shapefile
plot(GFST,col='red')

# Mask SST with the GFST boundaries
masked_rc <- mask(ras_sst, GFST)

# Visualize the SST in GFST Province
plot(masked_rc)
```

::: {.callout-note title="Troubleshooting"}

If you get the following error:

> Warning: Opening a /vsi file with the netCDF driver requires Linux userfaultfd to be available. Or you may set the GDAL_SKIP=netCDF configuration option to force the use of the HDF5 driver. (GDAL error 1)Error: [rast] file does not exist: /vsicurl/https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/AVHRR_OI-NCEI-L4-GLOB-v2.1/20191231120000-NCEI-L4_GHRSST-SSTblend-AVHRR_OI-GLOB-v02.0-fv02.1.nc
## Compute monthly average of SST

[insert solve]

:::

We will construct a data cube to compute monthly average for sea surface
temperature data within the boundary.

To minimize data loading times, the first 10 results, which correspond to 
approximately two months of data, will be used for this exercise.


```{r}
# Select the first 10 SST results
ras_all <- terra::rast(results[c(1:10)], vsi = TRUE)

# Trim the SST data to the boundaries of GFST
rc_all <- terra::mask(ras_all, GFST)

# SST data
rc_sst <- rc_all["analysed_sst", ]

# Function to convert times to year-month format
year_month <- function(x) {
  format(as.Date(time(x), format="%Y-%m-%d"), "%Y-%m")
}

# Convert time to Year-month format for aggregation
ym <- year_month(rc_all)

# Compute raster mean grouped by Year-month
monthly_mean_rast <- terra::tapp(rc_all, ym, fun = mean)

# Compute mean across raster grouped by Year-month
monthly_means <- global(monthly_mean_rast, fun = mean, na.rm=TRUE)


```

## Convert raster into data frame 
```{r}

# Convert raster into data.frame
monthly_means_df <- as.data.frame(monthly_means)

# Convert year_month to a column
monthly_means_df$year_month <- sub("X", "", rownames(monthly_means_df))
```
## Plot monthly mean of sea surface temperature within GFST province

```{r}

# Plot monthly mean
ggplot(data = monthly_means_df, aes(x = year_month, y = mean, group = 1)) +
  geom_line() +
  geom_point() +
  xlab("Year.Month") + 
  ylab("Mean SST (F)")

```
