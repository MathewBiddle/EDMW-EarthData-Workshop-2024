{
  "hash": "340e6e309daa55ca7c4afefc48900a25",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Set-up\n---\n\n\nTo work on the JupyterHub for the workshop:\n\n# User Accounts\n\n## GitHub username (required to get on hub)\n\n* Create a GitHub account (if you donâ€™t already have one) at <https://github.com>. Advice for choosing a GitHub username: this is a professional username that you will use in work settings. GitHub accounts are not anonymous; this is for sharing work. Using your real name is common.\n* Write down your username and password; you will need to log in during the course!\n* Here is [a video](https://www.youtube.com/watch?v=nHXw4mGoqiE) showing the whole process\n\n## Get on the JupyterHub (if you want to follow along)\n\nOnce you have submitted your GitHub username and have been accepted as a member of the DaskHub team on the nmfs-opensci organization, you can log-into the JupyterHub.\n\n<https://dhub.opensci.live/>\n\n* **Choose the default Py-R base geospatial image**. [Watch a video](https://youtu.be/o99jZWHqKi8) of the login process and basic JupyterHub orientation.\n\n* home directory is yours and no one else can see it. To share files, you can connect to a GitHub repository or use the `shared` directory. Everyone can read and write to this directory. Please don't delete content that is not your own.\n\n## Earthdata Login account (optional)\n\nWe will be using a public user account, but if you do a lot of work with NASA Earthdata, you should get a login account. \n\n* Create an Earthdata Login account (if you don't already have one) at <https://urs.earthdata.nasa.gov>\n* Write down your username and password; you will need it.\n\n\n# To push to GitHub (optional)\n\nThis is optional if you want to save your work to GitHub.\n\n## Set up authentication to GitHub\n\nYou need to tell GitHub who you are so you can **push** your local changes up to GitHub. There are a few ways to do this. I am going to show you a way that works on any computer, including a virtual computer like the JupyterHub.\n\n### Step 1: Generate a Personal Access Token\n\nWe are going to generate a **classic** token.\n\n1. Go to https://github.com/settings/tokens\n2. Click Generate new token > Generate new token (classic)\n3. When the pop-up shows up, fill in a description, click the \"repo\" checkbox, and then scroll to bottom to click \"Generate\".\n4. For scope, select \"repo\".\n5. SAVE the token. You need it for the next step.\n\n### Step 2: Tell Git who your are\n\n1. Open a terminal. In Jupyter Lab, you will see a box labelled \"Terminal\" on the Launcher window. In RStudio, you will see a tab (usually in lower left) with the label \"Terminal\"\n2. Paste these 3 lines of code into the terminal\n\n```\ngit config --global user.email \"<your email>\"\ngit config --global user.name \"<your name>\"\ngit config --global pull.rebase false\ngit config --global credential.helper store\n```\n\nReplace `\"<your email>\"` with something like `jane.doe@noaa.gov`. Replace `\"<your name>\"` with something like `\"Jane Doe\"`. Notice the quotes.\n\n### Step 3: Trigger git to ask for your password\n\nThere are a few ways to do this.\n\na) Clone a repo, make a change, and then commit and push the change\nb) Clone a private repo\n\nOption b is easiest if you are new to Git and GitHub. \n\n1. Open a terminal window\n2. Make sure you are in the home directory by typing `cd ~`\n3. Clone a repo and create an RStudio project. File > New Project > Version Control > Git. Paste in this URL https://github.com/nmfs-opensci/github_setup_check and make sure it is creating the repo at `~` (home directory).\n4. You will be asked for your GitHub username and password. For the password, enter the PERSONAL ACCESS TOKEN from Step 1.\n\n[Watch a video of these 4 steps](https://youtu.be/wivH2T9FwlA)\n\n[Full instructions with other ways to do this from R](https://rverse-tutorials.github.io/RWorkflow-NWFSC-2022/set-up.html#Git_from_RStudio_Desktop)\n\n# R Version Metadata\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.4 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0\n\nlocale:\n [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       \n [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   \n [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          \n[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   \n\ntime zone: Etc/UTC\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.1.1     cli_3.6.2        \n [5] tools_4.4.0       htmltools_0.5.8.1 rstudioapi_0.16.0 yaml_2.3.8       \n [9] rmarkdown_2.26    knitr_1.46        jsonlite_1.8.8    xfun_0.43        \n[13] digest_0.6.35     rlang_1.1.3       evaluate_0.23    \n```\n\n\n:::\n:::\n",
    "supporting": [
      "setup_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}